version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sonica-postgres
    environment:
      POSTGRES_DB: sonica
      POSTGRES_USER: sonica
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - sonica-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonica -d sonica"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sonica-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sonica-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Rust Audio Engine
  audio-engine:
    build:
      context: ./audio-engine
      dockerfile: Dockerfile
    container_name: sonica-audio-engine
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://sonica:password@postgres:5432/sonica
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=info
    volumes:
      - ./audio-engine:/app
      - audio_engine_data:/app/data
    networks:
      - sonica-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sonica-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://sonica:password@postgres:5432/sonica
      - REDIS_URL=redis://redis:6379
      - AUDIO_ENGINE_URL=http://audio-engine:8080
      - SECRET_KEY=your-secret-key-change-in-production
      - DEBUG=true
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - sonica-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      audio-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sonica-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    networks:
      - sonica-network
    depends_on:
      - backend
      - audio-engine
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sonica-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sonica-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sonica-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sonica-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  audio_engine_data:
    driver: local
  backend_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sonica-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
